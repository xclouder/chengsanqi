//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity previousActionChessPieceEntity { get { return GetGroup(GameMatcher.PreviousActionChessPiece).GetSingleEntity(); } }
    public PreviousActionChessPieceComponent previousActionChessPiece { get { return previousActionChessPieceEntity.previousActionChessPiece; } }
    public bool hasPreviousActionChessPiece { get { return previousActionChessPieceEntity != null; } }

    public GameEntity SetPreviousActionChessPiece(GameEntity newChessPieceEntity) {
        if (hasPreviousActionChessPiece) {
            throw new Entitas.EntitasException("Could not set PreviousActionChessPiece!\n" + this + " already has an entity with PreviousActionChessPieceComponent!",
                "You should check if the context already has a previousActionChessPieceEntity before setting it or use context.ReplacePreviousActionChessPiece().");
        }
        var entity = CreateEntity();
        entity.AddPreviousActionChessPiece(newChessPieceEntity);
        return entity;
    }

    public void ReplacePreviousActionChessPiece(GameEntity newChessPieceEntity) {
        var entity = previousActionChessPieceEntity;
        if (entity == null) {
            entity = SetPreviousActionChessPiece(newChessPieceEntity);
        } else {
            entity.ReplacePreviousActionChessPiece(newChessPieceEntity);
        }
    }

    public void RemovePreviousActionChessPiece() {
        previousActionChessPieceEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public PreviousActionChessPieceComponent previousActionChessPiece { get { return (PreviousActionChessPieceComponent)GetComponent(GameComponentsLookup.PreviousActionChessPiece); } }
    public bool hasPreviousActionChessPiece { get { return HasComponent(GameComponentsLookup.PreviousActionChessPiece); } }

    public void AddPreviousActionChessPiece(GameEntity newChessPieceEntity) {
        var index = GameComponentsLookup.PreviousActionChessPiece;
        var component = CreateComponent<PreviousActionChessPieceComponent>(index);
        component.chessPieceEntity = newChessPieceEntity;
        AddComponent(index, component);
    }

    public void ReplacePreviousActionChessPiece(GameEntity newChessPieceEntity) {
        var index = GameComponentsLookup.PreviousActionChessPiece;
        var component = CreateComponent<PreviousActionChessPieceComponent>(index);
        component.chessPieceEntity = newChessPieceEntity;
        ReplaceComponent(index, component);
    }

    public void RemovePreviousActionChessPiece() {
        RemoveComponent(GameComponentsLookup.PreviousActionChessPiece);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherPreviousActionChessPiece;

    public static Entitas.IMatcher<GameEntity> PreviousActionChessPiece {
        get {
            if (_matcherPreviousActionChessPiece == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.PreviousActionChessPiece);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherPreviousActionChessPiece = matcher;
            }

            return _matcherPreviousActionChessPiece;
        }
    }
}
